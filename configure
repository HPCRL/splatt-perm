#!/bin/bash
# Copyright 2014-2015, Dominique LaSalle. Used with permission.
# Modified by Shaden Smith, 2015-2016.



###############################################################################
# CONFIG VARIABLES ############################################################
###############################################################################

NAME="splatt"

###############################################################################
# FUNCTIONS ###################################################################
###############################################################################

die() {
  echo "ERROR: ${@}" 1>&2
  exit 1
}

abspath() {
  if [[ "${@::1}" == "/" ]]; then
    echo "${@}"
  else
    echo "${PWD}/${@}"
  fi
}

show_help() {
  echo "USAGE: configure [options]"
  echo ""

  echo "COMPILATION OPTIONS"
  echo "==================="
  echo "  --cc=<cc>"
  echo "    Set the C compiler."
  echo "  --cxx=<cxx>"
  echo "    Set the C++ compiler."
  echo "  --debug"
  echo "    Turn off optimizations and build with debugging symbols and assertions."
  echo "  --dev"
  echo "    Build in development mode. Warnings and extra logging enabled."

  echo "  --with-index-size={32,64}"
  echo "    Use 32 or 64 bit integers (default: 64)."
  echo "  --with-precision={single,double}"
  echo "    Use single or double precision floating point values (default: double)."
  echo ""

  echo "LIBRARY OPTIONS"
  echo "==============="
  #echo ""

  # MPI
  echo "  --with-mpi"
  echo "    Build with MPI support. Let CMake auto-detect MPI environment."
  echo "  --with-mpicc=<cc>"
  echo "    Set the MPI C compiler. Other configuration options may be determined by CMake."
  echo "  --with-mpicxx=<cxx>"
  echo "    Set the MPI C++ compiler. Other configuration options may be determined by CMake."
  echo ""

  # BLAS
  echo "If you are unhappy with the auto-detected BLAS/LAPACK libraries:"
  echo "  --with-blas-lib=<lib>"
  echo "    Set the BLAS library (e.g., /usr/.../libblas.so)."
  echo "  --with-lapack-lib=<lib>"
  echo "    Set the LAPACK library (e.g., /usr/.../liblapack.so)."
  echo "  --download-blas-lapack"
  echo "    Download generic BLAS/LAPACK libraries (possible performance loss)."
  echo ""

  echo "INSTALLATION OPTIONS:"
  echo "====================:"
  echo "  --prefix=<prefix>"
  echo "    Set the installation prefix."
  echo ""



#  echo "  --mtmetis"
#  echo "    Build with MT-Metis graph partitioning (must be previously installed)."
#  echo "  --patoh"
#  echo "    Build with PaToH hypergraph partitioning (must be previously installed)."
#  echo "  --ashado"
#  echo "    Build with Ashado hypergraph partitioning (must be previously installed)."
  echo "Please report bugs to <shaden@cs.umn.edu>."
  echo "SPLATT home page: <http://cs.umn.edu/~splatt/>."
}


###############################################################################
# OPTION PARSING ##############################################################
###############################################################################


#CONFIG_FLAGS="-DCMAKE_VERBOSE_MAKEFILE=1"
CONFIG_FLAGS=""


# default values
CMAKE="$(which cmake)"
BUILDDIR="build/$(uname -s)-$(uname -m)"


# parse arguments
for i in "${@}"; do
  case "${i}" in
    # help
    -h|--help)
    show_help
    exit 0
    ;;

    ## COMPILE OPTIONS
    # cc
    --cc=*)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DCMAKE_C_COMPILER=${i#*=}"
    ;;
    # cxx
    --cxx=*)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DCMAKE_CXX_COMPILER=${i#*=}"
    ;;
    # debug
    --debug)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DDEBUG=1"
    ;;
    # dev
    --dev)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DDEV_MODE=1"
    ;;
    --with-index-size=*)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DSPLATT_IDX_WIDTH=${i#*=}"
    ;;
    --with-precision=*)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DSPLATT_VAL_WIDTH=${i#*=}"
    ;;

    ## INSTALL OPTIONS
    # prefix
    --prefix=*)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DCMAKE_INSTALL_PREFIX=${i#*=}"
    ;;


    ## LIBRARY OPTIONS

    # BLAS/LAPACK
    --with-blas-dir=*)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DUSER_BLAS_DIR=${i#*=}"
    ;;
    --with-blas-lib=*)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DUSER_BLAS_LIB=${i#*=}"
    ;;
    --with-lapack-dir=*)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DUSER_LAPACK_DIR=${i#*=}"
    ;;
    --with-lapack-lib=*)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DUSER_LAPACK_LIB=${i#*=}"
    ;;
    --download-blas-lapack)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DDOWNLOAD_BLAS_LAPACK=TRUE"
    ;;


    # MPI support
    --with-mpi)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DUSE_MPI=1"
    ;;
    # deprecated mpi flag
    --mpi)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DUSE_MPI=1"
    ;;
    --with-mpicc=*)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DMPICC=${i#*=}"
    ;;
    --with-mpicxx=*)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DMPICXX=${i#*=}"
    ;;


    --mtmetis)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DUSE_MTMETIS=1"
    ;;
    --patoh)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DUSE_PATOH=1"
    ;;
    --ashado)
    CONFIG_FLAGS="${CONFIG_FLAGS} -DUSE_ASHADO=1"
    ;;


    # bad argument
    *)
    die "Unknown option '${i}'"
    ;;
  esac
done











# check if cmake exists
if [[ ! -x "${CMAKE}" ]]; then
  die "Could not find usable cmake: '${CMAKE}'"
else
  echo "Found CMAKE: '${CMAKE}'"
fi

# clean out build directory if it exists
if [[ -d "${BUILDDIR}" ]]; then
  echo "Removing old build directory '${BUILDDIR}'..."
  rm -rf "${BUILDDIR}"
fi


# create build directory
mkdir -vp "${BUILDDIR}" || \
    die "Failed to create build directory: '${BUILDDIR}'"


###############################################################################
# RUN CMAKE ###################################################################
###############################################################################

ROOTDIR="${PWD}"
pushd "${BUILDDIR}"

echo "Calling cmake with arguments '${CONFIG_FLAGS}'"
"${CMAKE}" "${ROOTDIR}" ${CONFIG_FLAGS}
if [[ "$?" != "0" ]]; then
  echo "CMake failed with '$?'" 1>&2
  exit $?
fi

popd

# create proxy makefile
(
echo "#######################################################################"
echo "# Makefile generated by '$0' at $(date)"
echo "# Using flags:"
for d in ${CONFIG_FLAGS}; do
  echo "#	${d}"
done
echo "#######################################################################"
echo ""
echo "all clean install uninstall:"
echo "	make -C ${BUILDDIR} \$@ \$(MAKEFLAGS)"
echo ""
echo "distclean:"
echo "	rm -rf ${BUILDDIR} Makefile"
echo ""
) > Makefile



