!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADJ_START_ALLOC	convert.c	/^static idx_t const ADJ_START_ALLOC = 8;$/;"	v	file:
ALG_DFACTO	cmds/cmd_bench.c	/^  ALG_DFACTO,$/;"	e	enum:__anon19	file:
ALG_ERR	cmds/cmd_bench.c	/^  ALG_ERR,$/;"	e	enum:__anon19	file:
ALG_GIGA	cmds/cmd_bench.c	/^  ALG_GIGA,$/;"	e	enum:__anon19	file:
ALG_NALGS	cmds/cmd_bench.c	/^  ALG_NALGS$/;"	e	enum:__anon19	file:
ALG_SPLATT	cmds/cmd_bench.c	/^  ALG_SPLATT,$/;"	e	enum:__anon19	file:
ALG_TTBOX	cmds/cmd_bench.c	/^  ALG_TTBOX,$/;"	e	enum:__anon19	file:
CMD_BENCH	cmds/splatt_cmds.h	/^  CMD_BENCH,$/;"	e	enum:splatt_cmd
CMD_CONVERT	cmds/splatt_cmds.h	/^  CMD_CONVERT,$/;"	e	enum:splatt_cmd
CMD_CPD	cmds/splatt_cmds.h	/^  CMD_CPD,$/;"	e	enum:splatt_cmd
CMD_ERROR	cmds/splatt_cmds.h	/^  CMD_ERROR,$/;"	e	enum:splatt_cmd
CMD_HELP	cmds/splatt_cmds.h	/^  CMD_HELP,$/;"	e	enum:splatt_cmd
CMD_NCMDS	cmds/splatt_cmds.h	/^  CMD_NCMDS$/;"	e	enum:splatt_cmd
CMD_REORDER	cmds/splatt_cmds.h	/^  CMD_REORDER,$/;"	e	enum:splatt_cmd
CMD_STATS	cmds/splatt_cmds.h	/^  CMD_STATS,$/;"	e	enum:splatt_cmd
CNV_ERROR	convert.h	/^  CNV_ERROR,$/;"	e	enum:__anon2
CNV_FIB_HGRAPH	convert.h	/^  CNV_FIB_HGRAPH, \/** Convert to a hypergraph whose nodes are <mode> fibers. *\/$/;"	e	enum:__anon2
CNV_FIB_SPMAT	convert.h	/^  CNV_FIB_SPMAT,  \/** Convert to a CSR matrix whose rows are <mode> fibers. *\/$/;"	e	enum:__anon2
CNV_IJK_GRAPH	convert.h	/^  CNV_IJK_GRAPH,  \/** Convert to a tri-partite graph. *\/$/;"	e	enum:__anon2
I	matrix.h	/^  idx_t I;$/;"	m	struct:__anon6
I	matrix.h	/^  idx_t I;$/;"	m	struct:__anon7
J	matrix.h	/^  idx_t J;$/;"	m	struct:__anon6
J	matrix.h	/^  idx_t J;$/;"	m	struct:__anon7
MAT_NORM_2	matrix.h	/^  MAT_NORM_2,$/;"	e	enum:__anon8
MAT_NORM_MAX	matrix.h	/^  MAT_NORM_MAX$/;"	e	enum:__anon8
MAX_NMODES	base.h	17;"	d
MIN_QUICKSORT_SIZE	sort.c	14;"	d	file:
MSG_FINISHED	mpi.c	/^static int const MSG_FINISHED  = 0;$/;"	v	file:
MSG_MUSTCLAIM	mpi.c	/^static int const MSG_MUSTCLAIM = 2;$/;"	v	file:
MSG_SENDBACK	mpi.c	/^static int const MSG_SENDBACK  = 3;$/;"	v	file:
MSG_STANDBY	mpi.c	/^static int const MSG_STANDBY   = 4;$/;"	v	file:
MSG_TRYCLAIM	mpi.c	/^static int const MSG_TRYCLAIM  = 1;$/;"	v	file:
MSG_UPDATES	mpi.c	/^static int const MSG_UPDATES   = 5;$/;"	v	file:
PERM_ERROR	reorder.h	/^  PERM_ERROR,$/;"	e	enum:__anon13
PERM_FIBSCHED	reorder.h	/^  PERM_FIBSCHED,    \/** Not done. *\/$/;"	e	enum:__anon13
PERM_GRAPH	reorder.h	/^  PERM_GRAPH,       \/** Reordering based on an n-partite graph partitioning. *\/$/;"	e	enum:__anon13
PERM_HGRAPH	reorder.h	/^  PERM_HGRAPH,      \/** Reordering based on an hypergraph partitioning. *\/$/;"	e	enum:__anon13
SPLATT_3MODE	sptensor.h	/^  SPLATT_3MODE,   \/** Three-mode tensors. *\/$/;"	e	enum:__anon1
SPLATT_BASE_H	base.h	2;"	d
SPLATT_BENCH_H	bench.h	2;"	d
SPLATT_CMDS_H	cmds/splatt_cmds.h	2;"	d
SPLATT_CONVERT_H	convert.h	2;"	d
SPLATT_CPD_H	cpd.h	2;"	d
SPLATT_FTENSOR_H	ftensor.h	2;"	d
SPLATT_GRAPH_H	graph.h	2;"	d
SPLATT_IO_H	io.h	2;"	d
SPLATT_LONG_FIB	ftensor.h	13;"	d
SPLATT_MATRIX_H	matrix.h	2;"	d
SPLATT_MPI_H	mpi.h	2;"	d
SPLATT_MTTKRP_H	mttkrp.h	2;"	d
SPLATT_NMODE	sptensor.h	/^  SPLATT_NMODE,   \/** Tensors of with arbitrary numbers of modes.$/;"	e	enum:__anon1
SPLATT_REORDER_H	reorder.h	2;"	d
SPLATT_SORT_H	sort.h	2;"	d
SPLATT_SPTENSOR_H	sptensor.h	2;"	d
SPLATT_STATS_H	stats.h	2;"	d
SPLATT_THDINFO_H	thd_info.h	2;"	d
SPLATT_TILE_H	tile.h	2;"	d
SPLATT_TIMER_H	timer.h	2;"	d
SPLATT_UTIL_H	util.h	2;"	d
SS_MAX	base.h	20;"	d
SS_MIN	base.h	19;"	d
STATS_BASIC	stats.h	/^  STATS_BASIC,    \/** Dimensions, nonzero count, and density. *\/$/;"	e	enum:__anon5
STATS_ERROR	stats.h	/^  STATS_ERROR,$/;"	e	enum:__anon5
STATS_HPARTS	stats.h	/^  STATS_HPARTS,   \/** Hypergraph partitioning information. Requires MODE *\/$/;"	e	enum:__anon5
TILE_SIZES	tile.h	/^static idx_t const TILE_SIZES[] = { 2048, 2048, 2048 };$/;"	v
TIMER_ALL	timer.h	/^  TIMER_ALL,$/;"	e	enum:__anon2
TIMER_CONVERT	timer.h	/^  TIMER_CONVERT,$/;"	e	enum:__anon2
TIMER_CPD	timer.h	/^  TIMER_CPD,$/;"	e	enum:__anon2
TIMER_DFACTO	timer.h	/^  TIMER_DFACTO,$/;"	e	enum:__anon2
TIMER_GIGA	timer.h	/^  TIMER_GIGA,$/;"	e	enum:__anon2
TIMER_INV	timer.h	/^  TIMER_INV,$/;"	e	enum:__anon2
TIMER_IO	timer.h	/^  TIMER_IO,$/;"	e	enum:__anon2
TIMER_MISC	timer.h	/^  TIMER_MISC,$/;"	e	enum:__anon2
TIMER_MTTKRP	timer.h	/^  TIMER_MTTKRP,$/;"	e	enum:__anon2
TIMER_NTIMERS	timer.h	/^  TIMER_NTIMERS$/;"	e	enum:__anon2
TIMER_REORDER	timer.h	/^  TIMER_REORDER,$/;"	e	enum:__anon2
TIMER_SORT	timer.h	/^  TIMER_SORT,$/;"	e	enum:__anon2
TIMER_SPLATT	timer.h	/^  TIMER_SPLATT,$/;"	e	enum:__anon2
TIMER_TILE	timer.h	/^  TIMER_TILE,$/;"	e	enum:__anon2
TIMER_TTBOX	timer.h	/^  TIMER_TTBOX,$/;"	e	enum:__anon2
TT_TILE	cmds/cmd_bench.c	64;"	d	file:
TT_TILE	cmds/cmd_cpd.c	21;"	d	file:
_GNU_SOURCE	base.h	6;"	d
_GNU_SOURCE	timer.h	7;"	d
__check_job	mpi.c	/^static idx_t __check_job($/;"	f	file:
__clear_uniques	tile.c	/^static void __clear_uniques($/;"	f	file:
__convert_fib_hgraph	convert.c	/^static void __convert_fib_hgraph($/;"	f	file:
__convert_fib_mat	convert.c	/^static void __convert_fib_mat($/;"	f	file:
__convert_ijk_graph	convert.c	/^static void __convert_ijk_graph($/;"	f	file:
__count_my_nnz	mpi.c	/^static idx_t __count_my_nnz($/;"	f	file:
__create_fptr	ftensor.c	/^static void __create_fptr($/;"	f	file:
__create_slabptr	ftensor.c	/^static void __create_slabptr($/;"	f	file:
__create_sliceptr	ftensor.c	/^static void __create_sliceptr($/;"	f	file:
__distribute_u3_rows	mpi.c	/^static void __distribute_u3_rows($/;"	f	file:
__fill_emap	graph.c	/^static void __fill_emap($/;"	f	file:
__fill_emap_fibonly	graph.c	/^static void __fill_emap_fibonly($/;"	f	file:
__fill_ssizes	mpi.c	/^static void __fill_ssizes($/;"	f	file:
__fill_uniques	tile.c	/^static idx_t __fill_uniques($/;"	f	file:
__fill_volume_stats	mpi.c	/^static void __fill_volume_stats($/;"	f	file:
__fill_vwts	graph.c	/^static void __fill_vwts($/;"	f	file:
__find_my_slices	mpi.c	/^static void __find_my_slices($/;"	f	file:
__get_dims	mpi.c	/^static void __get_dims($/;"	f	file:
__greedy_mat_distribution	mpi.c	/^static void __greedy_mat_distribution($/;"	f	file:
__log_mat	bench.c	/^static void __log_mat($/;"	f	file:
__make_job	mpi.c	/^static int __make_job($/;"	f	file:
__mat_backwardsolve	matrix.c	/^static void __mat_backwardsolve($/;"	f	file:
__mat_forwardsolve	matrix.c	/^static void __mat_forwardsolve($/;"	f	file:
__mkslabptr	tile.c	/^static idx_t * __mkslabptr($/;"	f	file:
__mkthreads	cmds/cmd_bench.c	/^static idx_t * __mkthreads($/;"	f	file:
__mustclaim_rows	mpi.c	/^static idx_t __mustclaim_rows($/;"	f	file:
__naive_mat_distribution	mpi.c	/^static void __naive_mat_distribution($/;"	f	file:
__pack_slab	tile.c	/^static void __pack_slab($/;"	f	file:
__par_cpd	cmds/cmd_cpd.c	/^static void __par_cpd($/;"	f	file:
__read_tt	mpi.c	/^static sptensor_t * __read_tt($/;"	f	file:
__read_tt_part	mpi.c	/^static void __read_tt_part($/;"	f	file:
__reorder_fibs	reorder.c	/^static void __reorder_fibs($/;"	f	file:
__reorder_inds	reorder.c	/^static void __reorder_inds($/;"	f	file:
__reorder_slices	reorder.c	/^static void __reorder_slices($/;"	f	file:
__setup_mat_ptrs	mpi.c	/^static void __setup_mat_ptrs($/;"	f	file:
__shuffle_mats	bench.c	/^static void __shuffle_mats($/;"	f	file:
__stats_basic	stats.c	/^static void __stats_basic($/;"	f	file:
__stats_hparts	stats.c	/^static void __stats_hparts($/;"	f	file:
__tile_uniques	tile.c	/^static void __tile_uniques($/;"	f	file:
__tryclaim_rows	mpi.c	/^static idx_t __tryclaim_rows($/;"	f	file:
__tt_density	stats.c	/^static double __tt_density($/;"	f	file:
__tt_insertionsort	sort.c	/^static void __tt_insertionsort($/;"	f	file:
__tt_insertionsort3	sort.c	/^static void __tt_insertionsort3($/;"	f	file:
__tt_quicksort	sort.c	/^static void __tt_quicksort($/;"	f	file:
__tt_quicksort3	sort.c	/^static void __tt_quicksort3($/;"	f	file:
__tt_read_file	io.c	/^static sptensor_t * __tt_read_file($/;"	f	file:
__ttcmp	sort.c	/^static inline int __ttcmp($/;"	f	file:
__ttcmp3	sort.c	/^static inline int __ttcmp3($/;"	f	file:
__ttqcmp	sort.c	/^static inline int __ttqcmp($/;"	f	file:
__ttqcmp3	sort.c	/^static inline int __ttqcmp3($/;"	f	file:
__ttswap	sort.c	/^static inline void __ttswap($/;"	f	file:
__update_adj	convert.c	/^static inline void __update_adj($/;"	f	file:
__write_part	mpi.c	/^static void __write_part($/;"	f	file:
algerr	cmds/cmd_bench.c	/^  char * algerr;$/;"	m	struct:__anon20	file:
argp_program_bug_address	cmds/splatt_bin.c	/^char const *argp_program_bug_address = "Shaden Smith <shaden@cs.umn.edu>";$/;"	v
argp_program_version	cmds/splatt_bin.c	/^char const *argp_program_version = "splatt v0.0";$/;"	v
bench_argp	cmds/cmd_bench.c	/^static struct argp bench_argp =$/;"	v	typeref:struct:argp	file:
bench_args	cmds/cmd_bench.c	/^} bench_args;$/;"	t	typeref:struct:__anon20	file:
bench_args_doc	cmds/cmd_bench.c	/^static char bench_args_doc[] = "TENSOR [-a ALG]...";$/;"	v	file:
bench_doc	cmds/cmd_bench.c	/^static char bench_doc[] =$/;"	v	file:
bench_funcs	cmds/cmd_bench.c	/^static void (*bench_funcs[ALG_NALGS]) (sptensor_t * const tt,$/;"	v	file:
bench_giga	bench.c	/^void bench_giga($/;"	f
bench_options	cmds/cmd_bench.c	/^static struct argp_option bench_options[] = {$/;"	v	typeref:struct:argp_option	file:
bench_opts	bench.h	/^} bench_opts;$/;"	t	typeref:struct:__anon21
bench_splatt	bench.c	/^void bench_splatt($/;"	f
bench_ttbox	bench.c	/^void bench_ttbox($/;"	f
build_pptr	reorder.c	/^void build_pptr($/;"	f
bytes_str	util.c	/^char * bytes_str($/;"	f
check_argp	cmds/cmd_check.c	/^static struct argp check_argp =$/;"	v	typeref:struct:argp	file:
check_args	cmds/cmd_check.c	/^} check_args;$/;"	t	typeref:struct:__anon1	file:
check_args_doc	cmds/cmd_check.c	/^static char check_args_doc[] = "TENSOR";$/;"	v	file:
check_doc	cmds/cmd_check.c	/^static char check_doc[] =$/;"	v	file:
check_options	cmds/cmd_check.c	/^static struct argp_option check_options[] = {$/;"	v	typeref:struct:argp_option	file:
cmd	cmds/splatt_bin.c	/^  splatt_cmd cmd;$/;"	m	struct:splatt_args	file:
cmd_argp	cmds/splatt_bin.c	/^static struct argp cmd_argp = { 0, parse_cmd, cmd_args_doc, cmd_doc };$/;"	v	typeref:struct:argp	file:
cmd_args_doc	cmds/splatt_cmds.h	/^static char cmd_args_doc[] = "CMD";$/;"	v
cmd_doc	cmds/splatt_cmds.h	/^static char cmd_doc[] =$/;"	v
cmd_not_implemented	cmds/splatt_cmds.h	/^static inline void cmd_not_implemented(int argc, char ** argv)$/;"	f
cmd_str	cmds/splatt_bin.c	/^  char * cmd_str;$/;"	m	struct:splatt_args	file:
cnt	convert.c	/^  unsigned int cnt;$/;"	m	struct:__anon24	file:
colind	matrix.h	/^  idx_t * colind;$/;"	m	struct:__anon7
comm_3d	mpi.h	/^  MPI_Comm comm_3d;$/;"	m	struct:__anon1
convert_argp	cmds/cmd_convert.c	/^static struct argp convert_argp =$/;"	v	typeref:struct:argp	file:
convert_args	cmds/cmd_convert.c	/^} convert_args;$/;"	t	typeref:struct:__anon18	file:
convert_args_doc	cmds/cmd_convert.c	/^static char convert_args_doc[] = "TENSOR OUTPUT";$/;"	v	file:
convert_doc	cmds/cmd_convert.c	/^static char convert_doc[] =$/;"	v	file:
convert_options	cmds/cmd_convert.c	/^static struct argp_option convert_options[] = {$/;"	v	typeref:struct:argp_option	file:
coords_3d	mpi.h	/^  int coords_3d[MAX_NMODES];$/;"	m	struct:__anon1
cpd	cpd.c	/^void cpd($/;"	f
cpd_argp	cmds/cmd_cpd.c	/^static struct argp cpd_argp =$/;"	v	typeref:struct:argp	file:
cpd_args_doc	cmds/cmd_cpd.c	/^static char cpd_args_doc[] = "TENSOR";$/;"	v	file:
cpd_doc	cmds/cmd_cpd.c	/^static char cpd_doc[] =$/;"	v	file:
cpd_options	cmds/cmd_cpd.c	/^static struct argp_option cpd_options[] = {$/;"	v	typeref:struct:argp_option	file:
cpd_opts	cpd.h	/^} cpd_opts;$/;"	t	typeref:struct:__anon1
dim_perms	ftensor.h	/^  idx_t dim_perms[MAX_NMODES][MAX_NMODES];$/;"	m	struct:__anon12
dims	ftensor.h	/^  idx_t dims[MAX_NMODES];$/;"	m	struct:__anon12
dims	sptensor.h	/^  idx_t * dims;   \/** An array containing the dimension of each mode. *\/$/;"	m	struct:__anon2
dims_3d	mpi.h	/^  int dims_3d[MAX_NMODES];$/;"	m	struct:__anon1
eind	graph.h	/^  idx_t * eind;$/;"	m	struct:__anon23
eptr	graph.h	/^  idx_t * eptr;$/;"	m	struct:__anon23
fib_mode_order	ftensor.c	/^void fib_mode_order($/;"	f
fids	ftensor.h	/^  idx_t * fids[MAX_NMODES];$/;"	m	struct:__anon12
fix	cmds/cmd_check.c	/^  int fix;$/;"	m	struct:__anon1	file:
fptr	ftensor.h	/^  idx_t * fptr[MAX_NMODES];$/;"	m	struct:__anon12
ften_alloc	ftensor.c	/^ftensor_t * ften_alloc($/;"	f
ften_free	ftensor.c	/^void ften_free($/;"	f
ften_spmat	ftensor.c	/^spmatrix_t * ften_spmat($/;"	f
ftensor_t	ftensor.h	/^} ftensor_t;$/;"	t	typeref:struct:__anon12
global_dims	mpi.h	/^  idx_t global_dims[MAX_NMODES];$/;"	m	struct:__anon1
global_nnz	mpi.h	/^  idx_t global_nnz;$/;"	m	struct:__anon1
graph_t	graph.h	/^} graph_t;$/;"	t	typeref:struct:__anon22
hewts	graph.h	/^  idx_t * hewts;$/;"	m	struct:__anon23
hgraph_fib_alloc	graph.c	/^hgraph_t * hgraph_fib_alloc($/;"	f
hgraph_free	graph.c	/^void hgraph_free($/;"	f
hgraph_t	graph.h	/^} hgraph_t;$/;"	t	typeref:struct:__anon23
hgraph_uncut	graph.c	/^idx_t * hgraph_uncut($/;"	f
hgraph_write	io.c	/^void hgraph_write($/;"	f
hgraph_write_file	io.c	/^void hgraph_write_file($/;"	f
idx_t	base.h	15;"	d
ifname	cmds/cmd_bench.c	/^  char * ifname;$/;"	m	struct:__anon20	file:
ifname	cmds/cmd_check.c	/^  char * ifname;$/;"	m	struct:__anon1	file:
ifname	cmds/cmd_convert.c	/^  char * ifname;$/;"	m	struct:__anon18	file:
ifname	cmds/cmd_reorder.c	/^  char * ifname;$/;"	m	struct:__anon16	file:
ifname	cmds/cmd_stats.c	/^  char * ifname;$/;"	m	struct:__anon17	file:
ifname	cpd.h	/^  char * ifname;$/;"	m	struct:__anon1
ind	sptensor.h	/^  idx_t ** ind;   \/** An m x nnz matrix containing the coordinates of each$/;"	m	struct:__anon2
indmap	sptensor.h	/^  idx_t * indmap[MAX_NMODES]; \/** Maps local -> global indices. *\/$/;"	m	struct:__anon2
inds	ftensor.h	/^  idx_t * inds[MAX_NMODES];$/;"	m	struct:__anon12
ineed	mpi.h	/^  idx_t * ineed[MAX_NMODES]; \/** indices I need from each rank in layer *\/$/;"	m	struct:__anon1
ineeddisp	mpi.h	/^  int * ineeddisp[MAX_NMODES];$/;"	m	struct:__anon1
ineedptr	mpi.h	/^  int * ineedptr[MAX_NMODES];$/;"	m	struct:__anon1
init_timers	timer.c	/^void init_timers(void)$/;"	f
insertion_sort	sort.c	/^void insertion_sort($/;"	f
iperms	reorder.h	/^  idx_t * iperms[MAX_NMODES];$/;"	m	struct:__anon14
isend	mpi.h	/^  idx_t * isend[MAX_NMODES]; \/** indices I must send to each rank in layer *\/$/;"	m	struct:__anon1
isenddisp	mpi.h	/^  int * isenddisp[MAX_NMODES];$/;"	m	struct:__anon1
isendptr	mpi.h	/^  int * isendptr[MAX_NMODES];$/;"	m	struct:__anon1
kvp_t	convert.c	/^} kvp_t;$/;"	t	typeref:struct:__anon24	file:
layer_comm	mpi.h	/^  MPI_Comm layer_comm[MAX_NMODES];$/;"	m	struct:__anon1
layer_ends	mpi.h	/^  idx_t layer_ends[MAX_NMODES];$/;"	m	struct:__anon1
layer_rank	mpi.h	/^  int layer_rank[MAX_NMODES];$/;"	m	struct:__anon1
layer_starts	mpi.h	/^  idx_t layer_starts[MAX_NMODES];$/;"	m	struct:__anon1
main	cmds/splatt_bin.c	/^int main($/;"	f
mat_aTa	matrix.c	/^void mat_aTa($/;"	f
mat_aTa_hada	matrix.c	/^void mat_aTa_hada($/;"	f
mat_alloc	matrix.c	/^matrix_t * mat_alloc($/;"	f
mat_cholesky	matrix.c	/^void mat_cholesky($/;"	f
mat_end	mpi.h	/^  idx_t mat_end[MAX_NMODES];$/;"	m	struct:__anon1
mat_free	matrix.c	/^void mat_free($/;"	f
mat_matmul	matrix.c	/^void mat_matmul($/;"	f
mat_mkcol	matrix.c	/^matrix_t * mat_mkcol($/;"	f
mat_mkrow	matrix.c	/^matrix_t * mat_mkrow($/;"	f
mat_normalize	matrix.c	/^void mat_normalize($/;"	f
mat_ptrs	mpi.h	/^  idx_t * mat_ptrs[MAX_NMODES];$/;"	m	struct:__anon1
mat_rand	matrix.c	/^matrix_t * mat_rand($/;"	f
mat_start	mpi.h	/^  idx_t mat_start[MAX_NMODES];$/;"	m	struct:__anon1
mat_syminv	matrix.c	/^void mat_syminv($/;"	f
mat_write	io.c	/^void mat_write($/;"	f
matrix_t	matrix.h	/^} matrix_t;$/;"	t	typeref:struct:__anon6
mode	cmds/cmd_convert.c	/^  idx_t mode;$/;"	m	struct:__anon18	file:
mode	cmds/cmd_reorder.c	/^  idx_t mode;$/;"	m	struct:__anon16	file:
mode	cmds/cmd_stats.c	/^  idx_t mode;$/;"	m	struct:__anon17	file:
mode_rank	mpi.h	/^  int mode_rank[MAX_NMODES];$/;"	m	struct:__anon1
mpi_compute_ineed	mpi.c	/^void mpi_compute_ineed($/;"	f
mpi_cpd	mpi.c	/^void mpi_cpd($/;"	f
mpi_distribute_mats	mpi.c	/^permutation_t * mpi_distribute_mats($/;"	f
mpi_send_recv_stats	mpi.c	/^void mpi_send_recv_stats($/;"	f
mpi_setup_comms	mpi.c	/^void mpi_setup_comms($/;"	f
mpi_tt_read	mpi.c	/^sptensor_t * mpi_tt_read($/;"	f
mttkrp_giga	mttkrp.c	/^void mttkrp_giga($/;"	f
mttkrp_splatt	mttkrp.c	/^void mttkrp_splatt($/;"	f
mttkrp_splatt_coop_tiled	mttkrp.c	/^void mttkrp_splatt_coop_tiled($/;"	f
mttkrp_splatt_tiled	mttkrp.c	/^void mttkrp_splatt_tiled($/;"	f
mttkrp_ttbox	mttkrp.c	/^void mttkrp_ttbox($/;"	f
nedges	graph.h	/^  idx_t nedges;$/;"	m	struct:__anon22
nfibs	ftensor.h	/^  idx_t  nfibs[MAX_NMODES];$/;"	m	struct:__anon12
nhedges	graph.h	/^  idx_t nhedges;$/;"	m	struct:__anon23
niters	bench.h	/^  idx_t niters;$/;"	m	struct:__anon21
niters	cmds/cmd_bench.c	/^  idx_t niters;$/;"	m	struct:__anon20	file:
niters	cpd.h	/^  idx_t niters;$/;"	m	struct:__anon1
nmodes	ftensor.h	/^  idx_t nmodes;$/;"	m	struct:__anon12
nmodes	sptensor.h	/^  idx_t nmodes;   \/** The number of modes in the tensor, denoted 'm'. *\/$/;"	m	struct:__anon2
nnz	ftensor.h	/^  idx_t nnz;$/;"	m	struct:__anon12
nnz	matrix.h	/^  idx_t nnz;$/;"	m	struct:__anon7
nnz	sptensor.h	/^  idx_t nnz;      \/** The number of nonzeros in the tensor. *\/$/;"	m	struct:__anon2
np13	mpi.h	/^  int np13; \/* cube root of npes *\/$/;"	m	struct:__anon1
npes	mpi.h	/^  int npes;$/;"	m	struct:__anon1
nreallocs	convert.c	/^static idx_t nreallocs;$/;"	v	file:
nruns	bench.h	/^  idx_t nruns;$/;"	m	struct:__anon21
nslabs	ftensor.h	/^  idx_t    nslabs[MAX_NMODES];$/;"	m	struct:__anon12
nslcs	ftensor.h	/^  idx_t  nslcs[MAX_NMODES];$/;"	m	struct:__anon12
nthreads	cmds/cmd_bench.c	/^  idx_t nthreads;$/;"	m	struct:__anon20	file:
nthreads	cpd.h	/^  idx_t nthreads;$/;"	m	struct:__anon1
nvtxs	graph.h	/^  idx_t nvtxs;$/;"	m	struct:__anon22
nvtxs	graph.h	/^  idx_t nvtxs;$/;"	m	struct:__anon23
ofname	cmds/cmd_check.c	/^  char * ofname;$/;"	m	struct:__anon1	file:
ofname	cmds/cmd_convert.c	/^  char * ofname;$/;"	m	struct:__anon18	file:
ofname	cmds/cmd_reorder.c	/^  char * ofname;$/;"	m	struct:__anon16	file:
open_f	io.h	/^static inline FILE * open_f($/;"	f
parse_bench_opt	cmds/cmd_bench.c	/^static error_t parse_bench_opt($/;"	f	file:
parse_check_opt	cmds/cmd_check.c	/^static error_t parse_check_opt($/;"	f	file:
parse_cmd	cmds/splatt_bin.c	/^static error_t parse_cmd($/;"	f	file:
parse_convert_opt	cmds/cmd_convert.c	/^static error_t parse_convert_opt($/;"	f	file:
parse_cpd_opt	cmds/cmd_cpd.c	/^static error_t parse_cpd_opt($/;"	f	file:
parse_perm_opt	cmds/cmd_reorder.c	/^static error_t parse_perm_opt($/;"	f	file:
parse_stats_opt	cmds/cmd_stats.c	/^static error_t parse_stats_opt($/;"	f	file:
part_read	io.c	/^idx_t * part_read($/;"	f
perm	bench.h	/^  permutation_t * perm;$/;"	m	struct:__anon21
perm_alloc	reorder.c	/^permutation_t * perm_alloc($/;"	f
perm_apply	reorder.c	/^void perm_apply($/;"	f
perm_argp	cmds/cmd_reorder.c	/^static struct argp perm_argp =$/;"	v	typeref:struct:argp	file:
perm_args	cmds/cmd_reorder.c	/^} perm_args;$/;"	t	typeref:struct:__anon16	file:
perm_args_doc	cmds/cmd_reorder.c	/^static char perm_args_doc[] = "TENSOR";$/;"	v	file:
perm_doc	cmds/cmd_reorder.c	/^static char perm_doc[] =$/;"	v	file:
perm_free	reorder.c	/^void perm_free($/;"	f
perm_graph	reorder.c	/^permutation_t * perm_graph($/;"	f
perm_hgraph	reorder.c	/^permutation_t * perm_hgraph($/;"	f
perm_matrix	reorder.c	/^matrix_t * perm_matrix($/;"	f
perm_options	cmds/cmd_reorder.c	/^static struct argp_option perm_options[] = {$/;"	v	typeref:struct:argp_option	file:
perm_rand	reorder.c	/^permutation_t * perm_rand($/;"	f
permerr	cmds/cmd_bench.c	/^  char * permerr;$/;"	m	struct:__anon20	file:
permmode	cmds/cmd_bench.c	/^  idx_t permmode;$/;"	m	struct:__anon20	file:
perms	reorder.h	/^  idx_t * perms[MAX_NMODES];$/;"	m	struct:__anon14
permutation_t	reorder.h	/^} permutation_t;$/;"	t	typeref:struct:__anon14
pfname	cmds/cmd_bench.c	/^  char * pfname;$/;"	m	struct:__anon20	file:
pfname	cmds/cmd_reorder.c	/^  char * pfname;$/;"	m	struct:__anon16	file:
pfname	cmds/cmd_stats.c	/^  char * pfname;$/;"	m	struct:__anon17	file:
print_footer	cmds/splatt_bin.c	/^static inline void print_footer(void)$/;"	f	file:
print_header	cmds/splatt_cmds.h	/^static inline void print_header(void)$/;"	f
quicksort	sort.c	/^void quicksort($/;"	f
rand_idx	util.c	/^idx_t rand_idx(void)$/;"	f
rand_val	util.c	/^val_t rand_val(void)$/;"	f
rank	cmds/cmd_bench.c	/^  idx_t rank;$/;"	m	struct:__anon20	file:
rank	cpd.h	/^  idx_t rank;$/;"	m	struct:__anon1
rank	mpi.h	/^  int rank;$/;"	m	struct:__anon1
rank_3d	mpi.h	/^  int rank_3d;$/;"	m	struct:__anon1
rank_free	mpi.c	/^void rank_free($/;"	f
rank_info	mpi.h	/^} rank_info;$/;"	t	typeref:struct:__anon1
read_cmd	cmds/splatt_bin.c	/^static splatt_cmd read_cmd(char const * const str)$/;"	f	file:
recvs	mpi.h	/^  idx_t recvs[MAX_NMODES];$/;"	m	struct:__anon1
report_times	timer.c	/^void report_times(void)$/;"	f
req	mpi.h	/^  MPI_Request req;$/;"	m	struct:__anon1
rowmajor	matrix.h	/^  int rowmajor;$/;"	m	struct:__anon6
rowptr	matrix.h	/^  idx_t * rowptr;$/;"	m	struct:__anon7
rtype	cmds/cmd_bench.c	/^  splatt_perm_type rtype;$/;"	m	struct:__anon20	file:
running	timer.h	/^  int running;$/;"	m	struct:__anon1
scale	cmds/cmd_bench.c	/^  int scale;$/;"	m	struct:__anon20	file:
scratch	thd_info.h	/^  void * scratch;$/;"	m	struct:__anon9
scratch2	thd_info.h	/^  void * scratch2;$/;"	m	struct:__anon9
seconds	timer.h	/^  double seconds;$/;"	m	struct:__anon1
sends	mpi.h	/^  idx_t sends[MAX_NMODES];$/;"	m	struct:__anon1
sids	ftensor.h	/^  idx_t * sids[MAX_NMODES];$/;"	m	struct:__anon12
slabptr	ftensor.h	/^  idx_t * slabptr[MAX_NMODES];$/;"	m	struct:__anon12
sp_timer_t	timer.h	/^} sp_timer_t;$/;"	t	typeref:struct:__anon1
splatt_algs	cmds/cmd_bench.c	/^} splatt_algs;$/;"	t	typeref:enum:__anon19	file:
splatt_args	cmds/splatt_bin.c	/^typedef struct splatt_args$/;"	s	file:
splatt_args	cmds/splatt_bin.c	/^} splatt_args;$/;"	t	typeref:struct:splatt_args	file:
splatt_bench	cmds/cmd_bench.c	/^void splatt_bench($/;"	f
splatt_check	cmds/cmd_check.c	/^void splatt_check($/;"	f
splatt_cmd	cmds/splatt_cmds.h	/^typedef enum splatt_cmd$/;"	g
splatt_cmd	cmds/splatt_cmds.h	/^} splatt_cmd;$/;"	t	typeref:enum:splatt_cmd
splatt_cmds	cmds/splatt_cmds.h	/^static void (*splatt_cmds[CMD_NCMDS]) (int argc, char ** argv) = {$/;"	v
splatt_convert	cmds/cmd_convert.c	/^void splatt_convert($/;"	f
splatt_convert_type	convert.h	/^} splatt_convert_type;$/;"	t	typeref:enum:__anon2
splatt_cpd	cmds/cmd_cpd.c	/^void splatt_cpd($/;"	f
splatt_mat_norm	matrix.h	/^} splatt_mat_norm;$/;"	t	typeref:enum:__anon8
splatt_perm_type	reorder.h	/^} splatt_perm_type;$/;"	t	typeref:enum:__anon13
splatt_reorder	cmds/cmd_reorder.c	/^void splatt_reorder($/;"	f
splatt_stats	cmds/cmd_stats.c	/^void splatt_stats($/;"	f
splatt_stats_type	stats.h	/^} splatt_stats_type;$/;"	t	typeref:enum:__anon5
spmat_alloc	matrix.c	/^spmatrix_t * spmat_alloc($/;"	f
spmat_free	matrix.c	/^void spmat_free($/;"	f
spmat_write	io.c	/^void spmat_write($/;"	f
spmat_write_file	io.c	/^void spmat_write_file($/;"	f
spmatrix_t	matrix.h	/^} spmatrix_t;$/;"	t	typeref:struct:__anon7
sptensor_t	sptensor.h	/^} sptensor_t;$/;"	t	typeref:struct:__anon2
sptr	ftensor.h	/^  idx_t * sptr[MAX_NMODES];$/;"	m	struct:__anon12
start	timer.h	/^  struct timespec start;$/;"	m	struct:__anon1	typeref:struct:__anon1::timespec
stats_argp	cmds/cmd_stats.c	/^static struct argp stats_argp =$/;"	v	typeref:struct:argp	file:
stats_args	cmds/cmd_stats.c	/^} stats_args;$/;"	t	typeref:struct:__anon17	file:
stats_args_doc	cmds/cmd_stats.c	/^static char stats_args_doc[] = "TENSOR";$/;"	v	file:
stats_doc	cmds/cmd_stats.c	/^static char stats_doc[] =$/;"	v	file:
stats_options	cmds/cmd_stats.c	/^static struct argp_option stats_options[] = {$/;"	v	typeref:struct:argp_option	file:
stats_tt	stats.c	/^void stats_tt($/;"	f
status	mpi.h	/^  MPI_Status status;$/;"	m	struct:__anon1
stop	timer.h	/^  struct timespec stop;$/;"	m	struct:__anon1	typeref:struct:__anon1::timespec
thd_free	thd_info.c	/^void thd_free($/;"	f
thd_info	thd_info.h	/^} thd_info;$/;"	t	typeref:struct:__anon9
thd_init	thd_info.c	/^thd_info * thd_init($/;"	f
thd_reset	thd_info.c	/^void thd_reset($/;"	f
thd_times	thd_info.c	/^void thd_times($/;"	f
threads	bench.h	/^  idx_t * threads;$/;"	m	struct:__anon21
tile	bench.h	/^  int tile;$/;"	m	struct:__anon21
tile	cmds/cmd_bench.c	/^  int tile;$/;"	m	struct:__anon20	file:
tile	cpd.h	/^  int tile;$/;"	m	struct:__anon1
tiled	ftensor.h	/^  int tiled;$/;"	m	struct:__anon12
tiled	sptensor.h	/^  int tiled;      \/** Whether sptensor_t has been tiled. Used by ftensor_t. *\/$/;"	m	struct:__anon2
timer_fstart	timer.h	/^static inline void timer_fstart(sp_timer_t * const timer)$/;"	f
timer_id	timer.h	/^} timer_id;$/;"	t	typeref:enum:__anon2
timer_names	timer.c	/^static char const * const timer_names[] = {$/;"	v	file:
timer_reset	timer.h	/^static inline void timer_reset(sp_timer_t * const timer)$/;"	f
timer_start	timer.h	/^static inline void timer_start(sp_timer_t * const timer)$/;"	f
timer_stop	timer.h	/^static inline void timer_stop(sp_timer_t * const timer)$/;"	f
timers	timer.c	/^sp_timer_t timers[TIMER_NTIMERS];$/;"	v
tt_alloc	sptensor.c	/^sptensor_t * tt_alloc($/;"	f
tt_convert	convert.c	/^void tt_convert($/;"	f
tt_free	sptensor.c	/^void tt_free($/;"	f
tt_get_slices	sptensor.c	/^idx_t * tt_get_slices($/;"	f
tt_perm	reorder.c	/^permutation_t * tt_perm($/;"	f
tt_read	sptensor.c	/^sptensor_t * tt_read($/;"	f
tt_read_file	io.c	/^sptensor_t * tt_read_file($/;"	f
tt_remove_dups	sptensor.c	/^idx_t tt_remove_dups($/;"	f
tt_remove_empty	sptensor.c	/^idx_t tt_remove_empty($/;"	f
tt_sort	sort.c	/^void tt_sort($/;"	f
tt_tile	tile.c	/^void tt_tile($/;"	f
tt_type	sptensor.h	/^} tt_type;$/;"	t	typeref:enum:__anon1
tt_unfold	sptensor.c	/^spmatrix_t * tt_unfold($/;"	f
tt_write	io.c	/^void tt_write($/;"	f
tt_write_file	io.c	/^void tt_write_file($/;"	f
ttime	thd_info.h	/^  sp_timer_t ttime;$/;"	m	struct:__anon9
type	cmds/cmd_convert.c	/^  splatt_convert_type type;$/;"	m	struct:__anon18	file:
type	cmds/cmd_reorder.c	/^  splatt_perm_type type;$/;"	m	struct:__anon16	file:
type	cmds/cmd_stats.c	/^  splatt_stats_type type;$/;"	m	struct:__anon17	file:
type	sptensor.h	/^  tt_type type;   \/** Type of tensor represented *\/$/;"	m	struct:__anon2
typestr	cmds/cmd_reorder.c	/^  char * typestr;$/;"	m	struct:__anon16	file:
v	convert.c	/^  idx_t v;$/;"	m	struct:__anon24	file:
val_t	base.h	14;"	d
vals	ftensor.h	/^  val_t * vals[MAX_NMODES];$/;"	m	struct:__anon12
vals	matrix.h	/^  val_t * vals;$/;"	m	struct:__anon7
vals	matrix.h	/^  val_t *vals;$/;"	m	struct:__anon6
vals	sptensor.h	/^  val_t * vals;   \/** An array containing the values of each nonzero. *\/$/;"	m	struct:__anon2
vmax	util.h	/^static inline val_t vmax($/;"	f
vmin	util.h	/^static inline val_t vmin($/;"	f
vwts	graph.h	/^  idx_t * vwts;$/;"	m	struct:__anon23
which	cmds/cmd_bench.c	/^  int which[ALG_NALGS];$/;"	m	struct:__anon20	file:
worksize	mpi.h	/^  idx_t worksize;$/;"	m	struct:__anon1
write	bench.h	/^  int write;$/;"	m	struct:__anon21
write	cmds/cmd_bench.c	/^  int write;$/;"	m	struct:__anon20	file:
